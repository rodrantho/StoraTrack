name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Job de testing y calidad de código
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: storatrack_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov black flake8 isort bandit safety
    
    - name: Create test environment file
      run: |
        cat > .env << EOF
        SECRET_KEY=test-secret-key
        ENVIRONMENT=testing
        DEBUG=true
        DATABASE_URL=postgresql://postgres:postgres@localhost:5432/storatrack_test
        REDIS_URL=redis://localhost:6379/1
        HOST=localhost
        PORT=8000
        EOF
    
    - name: Run code formatting check
      run: |
        black --check app/ --line-length=88
        isort --check-only app/ --profile black
    
    - name: Run linting
      run: |
        flake8 app/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run security analysis
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Initialize test database
      run: |
        python app/init_db.py
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/storatrack_test
        REDIS_URL: redis://localhost:6379/1
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/storatrack_test
        REDIS_URL: redis://localhost:6379/1
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports
        path: |
          htmlcov/
          bandit-report.json
          safety-report.json
          coverage.xml

  # Job de build de Docker
  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/storatrack
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job de deployment a staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Aquí irían los comandos específicos de deployment
        # Por ejemplo, usando SSH, kubectl, docker-compose, etc.
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Aquí irían los smoke tests

  # Job de deployment a producción
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Aquí irían los comandos específicos de deployment
    
    - name: Run health checks
      run: |
        echo "Running health checks on production..."
        # Aquí irían los health checks

  # Job de release
  release:
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Build distribution packages
      run: |
        python -m pip install --upgrade pip build
        python -m build
    
    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-packages
        path: dist/
    
    - name: Create release notes
      run: |
        echo "Release ${{ github.event.release.tag_name }}" > release-notes.md
        echo "" >> release-notes.md
        echo "## Changes" >> release-notes.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release-notes.md
    
    - name: Update release
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const releaseNotes = fs.readFileSync('release-notes.md', 'utf8');
          
          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: context.payload.release.id,
            body: releaseNotes
          });

  # Job de análisis de dependencias
  dependency-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
    
    - name: Run dependency audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json
        safety check --json --output=safety-report.json
    
    - name: Upload dependency reports
      uses: actions/upload-artifact@v3
      with:
        name: dependency-reports
        path: |
          pip-audit-report.json
          safety-report.json

# Configuración de schedule para dependency check
# Ejecutar cada lunes a las 9:00 AM UTC
# on:
#   schedule:
#     - cron: '0 9 * * 1'
#   workflow_dispatch: