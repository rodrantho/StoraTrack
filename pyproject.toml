[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "storatrack"
version = "1.0.0"
description = "Sistema de Gestión de Inventario Multi-Tenant"
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Office/Business :: Financial :: Accounting",
    "Topic :: System :: Systems Administration",
]
keywords = ["inventory", "management", "fastapi", "multi-tenant", "qr-codes"]
authors = [
    {name = "StoraTrack Team", email = "dev@storatrack.com"}
]
maintainers = [
    {name = "StoraTrack Team", email = "dev@storatrack.com"}
]
license = {text = "MIT"}
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",
    "alembic>=1.12.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "jinja2>=3.1.0",
    "redis>=5.0.0",
    "reportlab>=4.0.0",
    "qrcode[pil]>=7.4.0",
    "python-barcode[images]>=0.15.0",
    "pillow>=10.0.0",
    "python-dateutil>=2.8.0",
    "pytz>=2023.3",
    "loguru>=0.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pre-commit>=3.5.0",
]
testing = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    "faker>=20.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/tu-usuario/storatrack"
Documentation = "https://github.com/tu-usuario/storatrack/wiki"
Repository = "https://github.com/tu-usuario/storatrack.git"
"Bug Tracker" = "https://github.com/tu-usuario/storatrack/issues"
Changelog = "https://github.com/tu-usuario/storatrack/blob/main/CHANGELOG.md"

[project.scripts]
storatrack = "main:app"

# Configuración de Black (formateo de código)
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded by ^/ will apply only to files and directories
# in the root of the project.
(
  ^/migrations/     # exclude migrations
  | ^/venv/         # exclude virtual environment
  | ^/env/          # exclude virtual environment
  | __pycache__     # exclude cache
)
'''

# Configuración de isort (ordenamiento de imports)
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["migrations/*", "venv/*", "env/*"]
known_first_party = ["app"]
known_third_party = [
    "fastapi",
    "sqlalchemy",
    "pydantic",
    "redis",
    "reportlab",
    "qrcode",
    "barcode",
    "PIL",
    "jose",
    "passlib",
    "jinja2",
    "uvicorn",
    "pytest",
    "loguru",
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# Configuración de pytest
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m "not slow"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "auth: marks tests as authentication tests",
    "database: marks tests that require database",
    "redis: marks tests that require Redis",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
env = [
    "ENVIRONMENT=testing",
    "DEBUG=true",
    "SECRET_KEY=test-secret-key",
    "DATABASE_URL=sqlite:///./test.db",
    "REDIS_URL=redis://localhost:6379/15",
]

# Configuración de coverage
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/env/*",
    "*/__pycache__/*",
    "*/migrations/*",
    "app/init_db.py",
    "app/seeds.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
skip_covered = false
skip_empty = false
sort = "Cover"

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Configuración de mypy (type checking)
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

# Módulos sin tipos
[[tool.mypy.overrides]]
module = [
    "reportlab.*",
    "barcode.*",
    "qrcode.*",
    "redis.*",
    "passlib.*",
    "jose.*",
    "PIL.*",
]
ignore_missing_imports = true

# Configuración de bandit (security linting)
[tool.bandit]
exclude_dirs = ["tests", "venv", "env"]
skips = ["B101", "B601"]  # Skip assert_used y shell_injection en tests

# Configuración de flake8 (no soporta pyproject.toml nativamente)
# Ver setup.cfg o .flake8 para configuración

# Configuración de setuptools
[tool.setuptools]
packages = ["app"]

[tool.setuptools.package-data]
app = ["py.typed"]

# Configuración de wheel
[tool.wheel]
universal = false