version: '3.8'

services:
  # Base de datos PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: storatrack_db
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-storatrack}
      POSTGRES_USER: ${DATABASE_USER:-storatrack_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-storatrack_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_db:/docker-entrypoint-initdb.d
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    networks:
      - storatrack_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-storatrack_user} -d ${DATABASE_NAME:-storatrack}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para cache y sesiones
  redis:
    image: redis:7-alpine
    container_name: storatrack_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - storatrack_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Aplicación web
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: storatrack_web
    environment:
      - DATABASE_URL=postgresql://${DATABASE_USER:-storatrack_user}:${DATABASE_PASSWORD:-storatrack_pass}@db:5432/${DATABASE_NAME:-storatrack}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
    ports:
      - "${WEB_PORT:-8000}:8000"
    volumes:
      - ./static:/app/static
      - ./uploads:/app/uploads
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - storatrack_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx como proxy reverso (opcional para producción)
  nginx:
    image: nginx:alpine
    container_name: storatrack_nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/var/www/static:ro
    depends_on:
      - web
    networks:
      - storatrack_network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  storatrack_network:
    driver: bridge